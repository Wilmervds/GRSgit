library(raster)
# Define the function
PlotMap <- function(country, level) {
datdir <- 'data'
dir.create(datdir, showWarnings = FALSE)
adm <- raster::getData("GADM", country = "PHL",
level = 2, path = datdir)
plot(adm[adm$NAME_1 == country,])
# An example based on that function
PlotMap(Netherlands, 2)
library(raster)
# Define the function
PlotMap <- function(country, level) {
datdir <- 'data'
dir.create(datdir, showWarnings = FALSE)
adm <- raster::getData("GADM", country = country,
level = level, path = datdir)
plot(adm[adm$NAME_1 == country,])
# An example based on that function
PlotMap(Netherlands, 2)
# Import packages
library(raster)
# Define the function
PlotMap <- function(country, level) {
datdir <- 'data'
dir.create(datdir, showWarnings = FALSE)
adm <- raster::getData("GADM", country = country,
level = level, path = datdir)
plot(adm[adm$NAME_1 == country,])
mar <- adm[adm$NAME_1 == "Marinduque",]
plot(mar, bg = "dodgerblue", axes=T)
plot(mar, lwd = 10, border = "skyblue", add=T)
plot(mar, col = "green4", add = T)
grid()
box()
# An example based on that function
PlotMap(Netherlands, 2)
datdir <- 'data'
dir.create(datdir, showWarnings = FALSE)
adm <- raster::getData("GADM", country = country,
level = level, path = datdir)
plot(adm[adm$NAME_1 == country,])
mar <- adm[adm$NAME_1 == "Marinduque",]
plot(mar, bg = "dodgerblue", axes=T)
plot(mar, lwd = 10, border = "skyblue", add=T)
plot(mar, col = "green4", add = T)
grid()
box()
datdir <- 'data'
dir.create(datdir, showWarnings = FALSE)
adm <- raster::getData("GADM", country = country,
level = level, path = datdir)
plot(adm[adm$NAME_1 == country,])
mar <- adm[adm$NAME_1 == "Marinduque",]
plot(mar, bg = "dodgerblue", axes=T)
plot(mar, lwd = 10, border = "skyblue", add=T)
plot(mar, col = "green4", add = T)
grid()
box()
PlotMap <- function(country, level) {
datdir <- 'data'
dir.create(datdir, showWarnings = FALSE)
adm <- raster::getData("GADM", country = country,
level = level, path = datdir)
plot(adm[adm$NAME_1 == country,])
mar <- adm[adm$NAME_1 == "Marinduque",]
plot(mar, bg = "dodgerblue", axes=T)
plot(mar, lwd = 10, border = "skyblue", add=T)
plot(mar, col = "green4", add = T)
grid()
box()
PlotMap <- function(country, level) {
datdir <- 'data'
dir.create(datdir, showWarnings = FALSE)
adm <- raster::getData("GADM", country = country,
level = level, path = datdir)
plot(adm[adm$NAME_1 == country,])
mar <- adm[adm$NAME_1 == "Marinduque",]
plot(mar, bg = "dodgerblue", axes=T)
plot(mar, lwd = 10, border = "skyblue", add=T)
plot(mar, col = "green4", add = T)
grid()
box()
}
PlotMap(Netherlands, 2)
PlotMap(NLD, 2)
raster::getData("ISO3")
PlotMap("Netherlands", 2)
PlotMap <- function(country, level) {
datdir <- 'data'
dir.create(datdir, showWarnings = FALSE)
adm <- raster::getData("GADM", country = country,
level = level, path = datdir)
map <- adm[adm$NAME_1 == country,]
plot(map, bg = "dodgerblue", axes=T)
plot(map, lwd = 10, border = "skyblue", add=T)
plot(map, col = "green4", add = T)
grid()
box()
}
PlotMap <- function(country, level) {
datdir <- 'data'
dir.create(datdir, showWarnings = FALSE)
adm <- raster::getData("GADM", country = country,
level = level, path = datdir)
plot(adm, bg = "dodgerblue", axes=T)
plot(adm, lwd = 10, border = "skyblue", add=T)
plot(adm, col = "green4", add = T)
grid()
box()
}
View(PlotMap)
View(PlotMap)
PlotMap("Netherlands", 2)
PlotMap("Netherlands", 1)
## Libraries needed
library(raster)
library(spatstat)
library(rgeos)
## You can choose your own country here
bel <- raster::getData('alt', country='BEL', mask=TRUE) ## SRTM 90m height data
belshp <- raster::getData('GADM', country='BEL', level=2) ## administrative boundaries
## Create random points
dran <- runifpoint(500, win = as.vector(extent(bel)))
## Make the random point spatial points
S <- SpatialPoints(data.frame(x = dran$x, y = dran$y),
proj4string = CRS(proj4string(belshp)))
## Select only the ones within belgium
Sint <- gIntersection(S, belshp)
## Create a map
plot(bel)
plot(belshp, add=TRUE)
plot(Sint, add = TRUE, col = "red", pch = 19, cex = 0.2)
install.packages("spatstat")
install.packages("rgeos")
## Libraries needed
library(raster)
library(spatstat)
library(rgeos)
## You can choose your own country here
bel <- raster::getData('alt', country='BEL', mask=TRUE) ## SRTM 90m height data
belshp <- raster::getData('GADM', country='BEL', level=2) ## administrative boundaries
## Create random points
dran <- runifpoint(500, win = as.vector(extent(bel)))
## Make the random point spatial points
S <- SpatialPoints(data.frame(x = dran$x, y = dran$y),
proj4string = CRS(proj4string(belshp)))
## Select only the ones within belgium
Sint <- gIntersection(S, belshp)
## Create a map
plot(bel)
plot(belshp, add=TRUE)
plot(Sint, add = TRUE, col = "red", pch = 19, cex = 0.2)
out <- extract(bel, Sint, df = TRUE)
colnames(out) <- c("id", "height")
head(out)
plot(out, type = "p", pch = 19)
download.file(url = 'https://raw.githubusercontent.com/loicdtx/bfastSpatial/master/data/tura.rda', destfile = 'tura.rda', method = 'auto')
load('tura.rda')
install.packages("zoo")
library(zoo)
click2ts <- function(x) {
val <- click(x, n = 1)
z <- getZ(x)
plot(zoo(t(val), z), type = 'p', pch = 20, xlab = 'Time', ylab = 'NDVI (-)')
}
plot(tura, 1)
click2ts(tura)
install.packages("lubridate")
library(zoo)
library(lubridate)
library(raster)
## Download data (if it doesn't work, try with method='wget')
download.file(url = 'https://raw.githubusercontent.com/GeoScripting-WUR/Scripting4Geo/gh-pages/data/MODIS_VCF_2000-2010_NL.rds', destfile = 'MODIS_VCF_2000-2010_NL.rds', method = 'auto')
## Read the data
modis <- readRDS('MODIS_VCF_2000-2010_NL.rds')
## Clean data (values > 100 correspond to water)
modis[modis > 100] <- NA
## Visualize
plot(modis, 1)
modis <- readRDS('MODIS_VCF_2000-2010_NL.rds')
install.packages("leaflet")
library(leaflet)
m <- leaflet()
m <- addTiles(m)
m <- addMarkers(m, lng=5.665349, lat=51.987870, popup="Wageningen University")
m
library(googleVis)
library(XML)
library(httr)
# set googleVis options to change the behaviour of plot.gvis,
# so that only the chart component of the HTML file is written into the # output file.
op <- options(gvis.plot.tag='chart')
# Read table from html
url <- "http://en.wikipedia.org/wiki/List_of_national_parks"
#x <- readHTMLTable(readLines(url), which=3, stringsAsFactors = FALSE)
page <- GET(url, user_agent("httr"))
x <- readHTMLTable(text_content(page), which=3, stringsAsFactors = FALSE)
# Clean up df
colnames (x) <- c('country', 'oldest', 'number', 'area_tot', 'country_percentage')
x$oldest <- as.numeric(x$oldest)
x$number <- as.numeric(gsub("\\*", "", x$number))
x$area_tot <- as.numeric(gsub("(,)|(\\[.*\\])", "", x$area_tot))
x$country_percentage <- as.numeric(gsub("(%)|(\\[.*\\])", "", x$country_percentage))
nationalParks <- x
g <- gvisGeoChart(nationalParks, locationvar="country", colorvar = "oldest", sizevar = "number",
options=list(region="150", displayMode="markers", colorAxis="{colors: ['green', 'blue']}"))
plot(g)
install.packages("googleVis", "XML", "httr")
install.packages("googleVis")
install.packages("XML")
install.packages("httr")
library(googleVis)
library(XML)
library(httr)
# set googleVis options to change the behaviour of plot.gvis,
# so that only the chart component of the HTML file is written into the # output file.
op <- options(gvis.plot.tag='chart')
# Read table from html
url <- "http://en.wikipedia.org/wiki/List_of_national_parks"
#x <- readHTMLTable(readLines(url), which=3, stringsAsFactors = FALSE)
page <- GET(url, user_agent("httr"))
x <- readHTMLTable(text_content(page), which=3, stringsAsFactors = FALSE)
# Clean up df
colnames (x) <- c('country', 'oldest', 'number', 'area_tot', 'country_percentage')
x$oldest <- as.numeric(x$oldest)
x$number <- as.numeric(gsub("\\*", "", x$number))
x$area_tot <- as.numeric(gsub("(,)|(\\[.*\\])", "", x$area_tot))
x$country_percentage <- as.numeric(gsub("(%)|(\\[.*\\])", "", x$country_percentage))
nationalParks <- x
g <- gvisGeoChart(nationalParks, locationvar="country", colorvar = "oldest", sizevar = "number",
options=list(region="150", displayMode="markers", colorAxis="{colors: ['green', 'blue']}"))
plot(g)
?extract
modis <- download.file(https://raw.githubusercontent.com/GeoScripting-WUR/VectorRaster/gh-pages/data/MODIS.zip, destfile = 'modis.zip', method = auto)
download.file(url = 'https://raw.githubusercontent.com/GeoScripting-WUR/VectorRaster/gh-pages/data/MODIS.zip', destfile = 'modis.zip', method = 'auto')
unzip('modis.zip')
getwd()
modisfile = file.path("MOD13A3.A2014001.h18v03.005.grd")
str(modisfile)
head(modisfile)
modisfile = file.path("MOD13A3.A2014001.h18v03.005.gri")
str(modisfile)
head(modisfile)
plot(modisfile)
modisfile2 = file.path("MOD13A3.A2014001.h18v03.005.grd")
plot(modisfile2)
modis <- readGDR(modisfile2, layer = ogrListLayers(modisfile2))
x <- raster()
x
x[] <- runif(ncell(x))
plot(x)
writeRaster(x, "MOD13A3.A2014001.h18v03.005.grd")
modis <- brick('MOD13A3.A2014001.h18v03.005.grd')
plot(modis)
str(modis)
NDVIjanuary <- "modis@data$January"
plot(NDVIjanuary)
NDVIjanuary <- modis@data$January
NDVIjanuary <- [modis@data == 'January']
NDVIjanuary <- modis@data == 'January'
NDVIjanuary <- modis@data == January
NDVIjanuary <- modis[modis@data == 'January',]
NDVIjanuary <- modis[modis == 'January',]
NDVIjanuary <- subset(modis, modis@data == January)
NDVIjanuary <- subset(modis, modis == January)
NDVIjanuary <- modis@data[modis == January,]
NDVIjanuary <- modis@data[modis@data == January,]
NDVIjanuary <- modis@data[modis@data == "January",]
NDVIjanuary <- modis@data[modis@data@names == "January",]
NDVIjanuary <- modis[modis@data@names == 'January',]
NDVIjanuary <- modis@data@names == 'January'
plot(NDVIjanuary)
str(NDVIjanuary)
NDVIjanuary <- modis[modis@data@names == 'January']
plot(NDVIjanuary)
str(NDVIjanuary)
NDVIjanuary <- modis[modis@data@names == 'January',]
NDVIjanuary <- modis[modis@data@names == 'January']
nlMunicipality <- getData('GADM',country='NLD', level=2)
plot(nlMunicipality)
1234 <- modis[modis@data@names == 'January']
12345 <- modis@data@names == 'January'
sometext <- modis[modis@data@names == 'January']
plot(sometext)
sometext <- modis[modis$data$names == 'January']
sometext <- modis[modis$January]
plot(sometext)
str(sometext)
head(modis)
sometext <- modis[modis == "January"]
sometext <- modis[modis == "January",]
meangreen <- extract(modis, nlMunicipality, fun = mean)
plot(meangreen)
plot(modis)
getwd()
setwd("C:\Users\WILMER\Documents\GRSr")
setwd("C:\\Users\WILMER\Documents\GRSr")
setwd("C:\\Users\\WILMER\\Documents\\GRSr")
getwd()
list.files()
list.files(\data)
list.files("\\data")
unzip("data\LC81970242014109-SC20141230042441.tar.gz")
unzip("data\\LC81970242014109-SC20141230042441.tar.gz")
untar("data\\LC81970242014109-SC20141230042441.tar.gz")
list.files()
untar("data\\LT51980241990098-SC20150107121947.tar.gz")
list.files()
gewata <- brick('LC81970242014109LGN00_sr_band1.tif')
gewata
img1band1 <- raster('LC81970242014109LGN00_sr_band1.tif')
img2band4 <- raster('LT51980241990098KIS00_sr_band4.tif')
img1band3 <- raster('LC81970242014109LGN00_sr_band3.tif')
img1band4 <- raster('LC81970242014109LGN00_sr_band4.tif')
img2band3 <- raster('LT51980241990098KIS00_sr_band3.tif')
plot(img1band3)
plot(img2band4)
img1band3
img2band4
Landsat8 <- brick(img1band3, img1band4)
cant <- brickLandsat8, img2band3)
cant <- brick(Landsat8, img2band3)
Landsat5 <- brick(img2band3, img2band4)
alldata <- brick(Landsat8, Landsat5)
crop(Landsat8, Landsat5, snap='near')
alldata <- brick(Landsat8, Landsat5)
crop(Landsat5, Landsat8, snap='near')
alldata <- brick(Landsat8, Landsat5)
## Name: Wilmer van der Spek
## Date: 18 Jan 2017
untar("data\\LC81970242014109-SC20141230042441.tar.gz")
untar("data\\LT51980241990098-SC20150107121947.tar.gz")
img1band3 <- raster('LC81970242014109LGN00_sr_band3.tif')
img1band4 <- raster('LC81970242014109LGN00_sr_band4.tif')
img2band3 <- raster('LT51980241990098KIS00_sr_band3.tif')
img2band4 <- raster('LT51980241990098KIS00_sr_band4.tif')
Landsat8 <- brick(img1band3, img1band4)
Landsat5 <- brick(img2band3, img2band4)
Landsat8
Landsat5
crop(Landsat8, Landsat5, snap='near')
Landsat5
Landsat8
crop(Landsat5, Landsat8, snap='near')
Landsat5
Landsat8
crop(Landsat8, Landsat5, snap='near')
Landsat5, snap='near')
b <- crop(Landsat5,
b <- crop(Landsat5, Landsat8, snap='near')
a <- crop(Landsat8, Landsat5, snap='near')
a <- crop(Landsat8, Landsat5, snap='near')
b <- crop(Landsat5, Landsat8, snap='near')
a
b
alldata <- brick(Landsat8, Landsat5)
Landsat8 <- crop(Landsat8, Landsat5, snap='near')
Landsat5 <- crop(Landsat5, Landsat8, snap='near')
alldata <- brick(Landsat8, Landsat5)
ndvi8 <- (Landsat8[[2]] - Landsat8[[1]]) / (Landsat8[[2]] + Landsat8[[1]])
ndvi5 <- (Landsat5[[2]] - Landsat5[[1]]) / (Landsat5[[2]] + Landsat5[[1]])
ndviChange <- ndvi8 - ndvi5
View(ndviChange)
ndviChange <- mean(ndvi8 - ndvi5)
View(ndviChange)
?sumrow
?sum
?rowSums
ndviChange <- rowSums(ndvi8 - ndvi5)
ndviChange
rowSums(ndvi5)
colSums(ndvi5)
cellStats(ndvi5, 'mean')
ndviChange <- cellStats(ndvi8 - ndvi5, 'mean')
ndviChange
list.files()
## Name: Wilmer van der Spek
## Date: 18 Jan 2017
untar("data\\LC81970242014109-SC20141230042441.tar.gz")
untar("data\\LT51980241990098-SC20150107121947.tar.gz")
img1red <- raster('LC81970242014109LGN00_sr_band4.tif')
img1nir <- raster('LC81970242014109LGN00_sr_band5.tif')
img1cfmask <- raster('LC81970242014109LGN00_cfmask.tif')
img2red <- raster('LT51980241990098KIS00_sr_band3.tif')
img2nir <- raster('LT51980241990098KIS00_sr_band4.tif')
img2cfmask <- raster('LT51980241990098KIS00_cfmask.tif')
Landsat8 <- brick(img1red, img1nir, img1cfmask)
Landsat5 <- brick(img2red, img2nir, img2cfmask)
Landsat8[img1cfmask != 0] <- NA
Landsat5[img2cfmask != 0] <- NA
Landsat8 <- crop(Landsat8, Landsat5, snap='near')
Landsat5 <- crop(Landsat5, Landsat8, snap='near')
ndvi8 <- (Landsat8[[2]] - Landsat8[[1]]) / (Landsat8[[2]] + Landsat8[[1]])
ndvi5 <- (Landsat5[[2]] - Landsat5[[1]]) / (Landsat5[[2]] + Landsat5[[1]])
ndviChange <- cellStats(ndvi8 - ndvi5, 'mean')
plot(img1cfmask)
plot(img1red)
cloud <- raster('LC81970242014109LGN00_sr_cloud.tif')
plot(cloud)
ndviChange
print(ndviChange)
